#!/bin/bash

if [ -z "${WIKI_DIR}" ]; then
    echo "Please export WIKI_DIR to configure your Zettelkasten location."
    exit 1
fi

if [ ! -d "$WIKI_DIR" ]; then
    echo "Zettelkasten path \"$WIKI_DIR\" does not exist."
    exit 1
fi

export FZF_DEFAULT_COMMAND='rg --files --color=always --line-number --no-heading --smart-case "${*:-}" $WIKI_DIR'
export FZF_DEFAULT_OPTS="--ansi \
      --inline-info \
      --layout=reverse \
      --color "hl:-1:underline,hl+:-1:underline:reverse" \
      --delimiter : \
      --preview 'batcat --style=plain --force-colorization --line-range :500 {}' \
      --preview-window 'down,85%' \
      --bind 'enter:become($EDITOR {})'"

app="$(basename "$0")"

sub_id(){
    date -u '+%Y%m%d%H%M%S'
}

usage(){
    echo "Usage: "$app" [subcommand] [options]"
    echo ""
    echo "Subcommands:"
    echo "    s|search [--tags|-t] PATTERN    Find notes with content matching PATTERN"
    echo "    b|backlinks TARGET		    Find backlinks referencing TARGET"
    echo "    f|find PATTERN		    Find notes with name matching PATTERN"
    echo "    id				    Generate a Zettelkasten timestamp"
    echo ""
}

find_files(){
    if type fd >/dev/null 2>&1; then
        fd "$1" "$WIKI_DIR"
    else
        find "$WIKI_DIR" -iname "*"$1"*"
    fi
}

search_in_files(){
    if [ -x "$(command -v rg)" ]; then
        rg "$1" "$WIKI_DIR" --files-with-matches
    elif [ -x "$(command -v ag)" ]; then
        ag "$1" "$WIKI_DIR" --files-with-matches
    else
        grep "$1" "$WIKI_DIR" --files-with-matches --recursive
    fi
}

sub_backlinks(){
    if [ -z "$1" ]; then
        echo "You have to provide a filename"
        exit 1
    fi

    # search_pattern=$(grep -o '[0-9]\+' <<< "$1")
    search_pattern="$1"
    search_in_files "$search_pattern" "$WIKI_DIR" --files-with-matches | grep -v "$1"
}

sub_find(){
    if [ -z "$1" ]; then
        echo 'You have to provide something to search for'
        exit 1
    fi

    find_files "$1"
}

sub_search(){
    if [ -z "$1" ]; then
      echo "You need a search term."
      exit 1
    fi

    case "$1" in
        "--tags" | "-t")
            shift
            search_in_files ".*:tags].*$1" "$WIKI_DIR" --files-with-matches
          ;;
        *)
	search_in_files "$1" "$WIKI_DIR" --files-with-matches
	;;
    esac
}

fzfmd(){
	fzf
	if [[ "$?" -eq 130 ]]; then
		"$EDITOR" "$WIKI_DIR"/"$(sub_id)".md
	fi
}

anymemo(){
	case "$FNAME" in
		TODO|Todo|todo)
			"$EDITOR" "$(ls -tr $WIKI_DIR/todo/*.md|head -n 1)" ;;
		remind|Remind|REMIND)
			"$EDITOR" "$WIKI_DIR"/todo/"$(sub_id)".md ;;
		*)
			"$EDITOR" "$WIKI_DIR"/"$FNAME"_"$(sub_id)".md ;;
	esac
}

matchingmd(){
	LEITNER=$(find $WIKI_DIR/"$FNAME"* -maxdepth 0 -type f 2>/dev/null)
	if [[ -n "$LEITNER" ]]; then
		echo "Name are similar with:"
		echo ""
		grep -c "$FNAME" "$(echo "$LEITNER"|tr ' ' '\n')"
		echo ""
		read -r -p "Do you want to make new?(N/y) " ASK
		case "$ASK" in
		NO|No|no|n|N)
			grep -c "$FNAME" "$(echo "$LEITNER"|tr ' ' '\n')"|cut -f1 -d":"|fzf
			# grep -c $FNAME $(echo "$LEITNER"|tr ' ' '\n')|fzf
			if [[ "$?" -eq 130 ]]; then
				"$EDITOR" "$WIKI_DIR"/"$FNAME"_"$(sub_id)".md
			fi
			exit
			;;
		*)
		anymemo
		exit
		;;
		esac
	else
		anymemo
	fi
}

subcommand="$1"
case $subcommand in
    "")
	if [[ "$#" -eq 0 ]]; then
	    read -r -p "Name: " FNAME
	fi
        ;;
    "-h" | "--help")
        usage
        ;;
    "b"|"backlinks")
        shift
        sub_backlinks "$@"
      ;;
    "f"|"find")
        shift
        sub_find "$@"
      ;;
    "s"|"search")
        shift
        sub_search "$@"
      ;;
    "id")
        shift
        sub_id "$@"
        exit 1
      ;;
    *)
	FNAME="$1"
        # echo "Error: '$subcommand' is not a known subcommand." >&2
        # echo "       Run '$app --help' for a list of known subcommands." >&2
        # exit 1
        ;;
esac

if [[ -n "$FNAME" ]]; then
	matchingmd
elif [[ "$#" -eq 0 ]]; then
	fzfmd
fi
